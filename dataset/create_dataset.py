

if __name__ == "__main__":
    # Import ember then create the vectorized features and metadata

    import ember
    import pickle
    import os
    import json
    import numpy as np

    # Uncomment if metadata or vectors arent created
    # ember.create_vectorized_features("../data/ember2018/")
    # ember.create_metadata("../data/ember2018/")



    metadata_df = ember.read_metadata("../data/ember2018/")

    X_train, y_train, X_test, y_test = ember.read_vectorized_features("../data/ember2018/")



    # Create the JSON version of the dataset to export

    def get_data(df, x, y, size):
        data_list = []
        columns = df.columns
        for i in range(size):
            if i % 10000 == 0:
                print (f"Element: {i}")
            obj = {}    
            ele = df.iloc[i]
            obj["x"] = x[i]
            obj["y"] = y[i]
            for col in columns:
                if col == "avclass" and isinstance(ele[col], float):
                    obj[col] = str(ele[col])
                elif col == "label":
                    obj[col] = str(ele[col])
                else:
                    obj[col] = ele[col]
            data_list.append(obj)
        return data_list



    train_df = metadata_df[metadata_df["subset"]=="train"]
    test_df = metadata_df[metadata_df["subset"]=="test"]

    num_train = 800000
    num_test = 200000

    train_ds = get_data(train_df, X_train, y_train, num_train)
    test_ds = get_data(test_df, X_test, y_test, num_test)



    class NumpyEncoder(json.JSONEncoder):
        """ Special json encoder for numpy types """
        def default(self, obj):
            if isinstance(obj, np.integer):
                return int(obj)
            elif isinstance(obj, np.floating):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            return json.JSONEncoder.default(self, obj)



    def write_file(list, num_files, num_elements, task):
        file_size = num_elements // num_files
        file_number = 1
        output = {}
        for i in range(0, num_elements, file_size):
            output_path = f"{os.getcwd()}\\data\\output\\ember2018_{task}_{file_number}.json"
            if len(list[i:]) == file_size:
                output["data"] = list[i:file_size+i]
            else:
                output["data"] = list[i:]
            print(f"Writing File: {output_path}")
            with open(output_path, "w") as f:            
                json.dump(output, f, cls=NumpyEncoder)
            file_number += 1



    write_file(train_ds, 10, num_train, "train")
    write_file(test_ds, 10, num_test, "test")

    print("Dataset Created.")


