

if __name__ == "__main__":
    # Import ember then create the vectorized features and metadata

    import ember
    import numpy as np
    import json


    ember.create_vectorized_features("../data/ember2018/")
    ember.create_metadata("../data/ember2018/")

    metadata_df = ember.read_metadata("../data/ember2018/")

    X_train, y_train, X_test, y_test = ember.read_vectorized_features("../data/ember2018/")



    # Create the JSON version of the dataset to export

    def get_dataset(df, x, y, size):
        data_list = []
        columns = df.columns
        for i in range(size):
            obj = {}    
            ele = df.iloc[i]
            obj["x"] = x[i]
            obj["y"] = y[i]
            for col in columns:
                if col == "avclass" and isinstance(ele[col], float):
                    obj[col] = str(ele[col])
                elif col == "label":
                    obj[col] = str(ele[col])
                else:
                    obj[col] = ele[col]
            data_list.append(obj)
        return {"data":data_list}



    train_df = metadata_df[metadata_df["subset"]=="train"]
    test_df = metadata_df[metadata_df["subset"]=="test"]

    num_train = 800000
    num_test = 200000

    train_ds = get_dataset(train_df, X_train, y_train, num_train)
    test_ds = get_dataset(test_df, X_test, y_test, num_test)


    class NpEncoder(json.JSONEncoder):
        def default(self, obj):
            if isinstance(obj, np.integer):
                return int(obj)
            if isinstance(obj, np.float32):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            else:
                return super(NpEncoder, self).default(obj)

    def write_list(file_path, obj):
        with open(file_path, "w") as f:
            json.dump(obj, f, cls=NpEncoder) 



    train_output_path = "../data/ember2018_train.json"
    test_output_path = "../data/ember2018_test.json"

    write_list(train_output_path, train_ds)
    write_list(test_output_path, test_ds)
    print("Dataset Created.")


